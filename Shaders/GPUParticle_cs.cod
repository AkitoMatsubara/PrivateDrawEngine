//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for Input
// {
//
//   struct GS_INPUT_GPU2
//   {
//       
//       float3 Position;               // Offset:    0
//       float3 Velocity;               // Offset:   12
//       float3 Force;                  // Offset:   24
//
//   } $Element;                        // Offset:    0 Size:    36
//
// }
//
// Resource bind info for Result
// {
//
//   struct GS_INPUT_GPU2
//   {
//       
//       float3 Position;               // Offset:    0
//       float3 Velocity;               // Offset:   12
//       float3 Force;                  // Offset:   24
//
//   } $Element;                        // Offset:    0 Size:    36
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Input                             texture  struct         r/o             t0      1 
// Result                                UAV  struct         r/w             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_resource_structured t0, 36
dcl_uav_structured u0, 36
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.x
dcl_temps 4
dcl_thread_group 400, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- Gid.x; vThreadGroupID.y <- Gid.y; vThreadGroupID.z <- Gid.z; 
//   vThreadIDInGroup.x <- GTid.x; vThreadIDInGroup.y <- GTid.y; vThreadIDInGroup.z <- GTid.z
//
#line 48 "C:\Users\2190322\Desktop\描画エンジン開発\PrivateEngine vsメモリリーク\Shaders\GPUParticle_cs.hlsl"
mov r0.x, vThreadIDInGroup.x  // r0.x <- x

#line 49
mov r0.y, vThreadGroupID.x  // r0.y <- y

#line 51
mov r0.z, l(400)
imul null, r0.y, r0.y, r0.z
iadd r0.x, r0.x, r0.y  // r0.x <- node

#line 137
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(24), t0.xxxx
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(28), t0.xxxx
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r0.w, r0.x, l(32), t0.xxxx
store_structured u0.x, r0.x, l(24), r0.y
store_structured u0.x, r0.x, l(28), r0.z
store_structured u0.x, r0.x, l(32), r0.w

#line 140
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(0), t0.xxxx  // r1.x <- pos.x
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(4), t0.xxxx  // r1.y <- pos.y
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(8), t0.xxxx  // r1.z <- pos.z

#line 141
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(12), t0.xxxx  // r2.x <- vel.x
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(16), t0.xxxx  // r2.y <- vel.y
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(20), t0.xxxx  // r2.z <- vel.z

#line 142
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r3.x, r0.x, l(24), t0.xxxx  // r3.x <- force.x
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r3.y, r0.x, l(28), t0.xxxx  // r3.y <- force.y
ld_structured_indexable(structured_buffer, stride=36)(mixed,mixed,mixed,mixed) r3.z, r0.x, l(32), t0.xxxx  // r3.z <- force.z

#line 143
add r0.yzw, r1.xxyz, r2.xxyz  // r0.y <- pos.x; r0.z <- pos.y; r0.w <- pos.z

#line 144
add r1.xyz, r2.xyzx, r3.xyzx  // r1.x <- vel.x; r1.y <- vel.y; r1.z <- vel.z

#line 146
store_structured u0.x, r0.x, l(12), r1.x
store_structured u0.x, r0.x, l(16), r1.y
store_structured u0.x, r0.x, l(20), r1.z

#line 147
store_structured u0.x, r0.x, l(0), r0.y
store_structured u0.x, r0.x, l(4), r0.z
store_structured u0.x, r0.x, l(8), r0.w

#line 149
ret 
// Approximately 29 instruction slots used
