//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerFrame2
// {
//
//   float4 Weight[25];                 // Offset:    0 Size:   400
//   float KarnelSize;                  // Offset:  400 Size:     4
//   float2 Texcel;                     // Offset:  404 Size:     8
//   float dummy;                       // Offset:  412 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// DecalSampler                      sampler      NA          NA             s0      1 
// DiffuseTexture                    texture  float4          2d             t0      1 
// CBPerFrame2                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[26], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
mul r0.x, cb3[25].x, cb3[25].x
mov r0.yzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  itof r1.y, r1.x
  ge r1.y, r1.y, r0.x
  breakc_nz r1.y
  mad r1.yz, cb3[25].yyzy, cb3[r1.x + 0].xxyx, v1.xxyx
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, r1.yzyy, t0.wxyz, s0
  mad r0.yzw, r1.yyzw, cb3[r1.x + 0].zzzz, r0.yyzw
  iadd r1.x, r1.x, l(1)
endloop 
mov o0.xyz, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 15 instruction slots used
