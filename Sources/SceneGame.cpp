#include "SceneGame.h"
#include "SceneTitle.h"

#include "Enemy.h"
#include "Stages.h"

#include "UseComputeShader.h"

#include <SimpleMath.h>

#include "SceneClear.h"
#include "SceneLoading.h"

bool SceneGame::Initialize() {
	Microsoft::WRL::ComPtr<ID3D11Device> device = FRAMEWORK->GetDevice();	// frameworkからdeviceを取得
	HRESULT hr = { S_OK };

	// シーンコンスタントバッファの設定
	CreateConstantBuffer(constant_buffer[0].GetAddressOf(), sizeof(scene_constants));

	// Samplerの設定
	sampleClamp = std::make_shared<Sampler>(D3D11_FILTER_MIN_MAG_MIP_LINEAR, D3D11_TEXTURE_ADDRESS_CLAMP);

	// 各種クラス設定
	{
		camera = std::make_unique<Camera>();

		// spriteオブジェクトを生成(今回は先頭の１つだけを生成する)
		sprites = std::make_unique<Sprite>();
		sprites->LoadImages(L".\\Resources\\screenshot.jpg");
		sprites->setSize(SCREEN_WIDTH, SCREEN_HEIGHT);

		// Geometric_primitiveオブジェクトの生成
		{
			grid = std::make_unique<Geometric_Cube>();
			grid->setPos(DirectX::SimpleMath::Vector3(0, -1, 0));
			grid->setSize(DirectX::SimpleMath::Vector3(10, 0.1f, 10));
		}

		player = std::make_unique<Player>();
		player->Initialize();

		EnemyManager::getInstance().Initialize();

		StageManager::getInstance().Initialize();
	}

	// Compute Shaderセッティング
	{
		// CS用コンスタントバッファの設定
		CreateConstantBuffer(constant_buffer[1].GetAddressOf(), sizeof(cs_constants));

		ComputeShader = std::make_unique<ShaderEx>();
		ComputeShader->CreateCS(L"Shaders\\ComputeShader_cs");

		// 入力用バッファーに初期値を設定する
		for (int i = 0; i < NUM_ELEMENTS; i++)
		{
			vBufInArray[i].i = i;
			vBufInArray[i].f = static_cast<float>(NUM_ELEMENTS - 1 - i);
		}

		// コンピュートシェーダーへの入力時に使用するSRVを作成する
		UseComputeShader::CreateStructuredBufferAndSRV(sizeof(BUFIN_TYPE), NUM_ELEMENTS, &vBufInArray[0], pBufInput.GetAddressOf(), pBufInputSRV.GetAddressOf());

		// コンピュートシェーダーからの出力時に使用するUAVを作成する
		UseComputeShader::CreateStructuredBufferAndUAV(sizeof(BUFOUT_TYPE), NUM_ELEMENTS, NULL, pBufResult.GetAddressOf(), pBufResultUAV.GetAddressOf());
	}

	camera->SetProjection(DirectX::XMConvertToRadians(30), camera->GetWidth() / camera->GetHeight(), camera->GetNear(), camera->GetFar());

	GpuParticle = std::make_unique<GPUParticle>();
	GpuParticle->Init();

	skybox = std::make_unique<SkyBox>(L".\\Resources\\SkyBox.png");

	test = std::make_unique<Font>();
	test->LoadFont(L".\\Resources\\fonts\\APJapanesefontF.ttf", L"あんずもじ湛");
	test->CreateFontTexture(L"D");
	return true;
}

void SceneGame::Update() {
	const float elapsed_time = FRAMEWORK->GetElapsedTime();
	// シーン切り替え
	if (GetAsyncKeyState('L') & 1)
	{
		setScene(std::make_unique<SceneLoading>(std::make_unique<SceneTitle>()));
	}
	//if (GetAsyncKeyState('C') & 1)
	//{
	//	setScene(std::make_unique<SceneLoading>(std::make_unique<SceneClear>()));
	//}

	player->Update();
	StageManager::getInstance().Update();

	// カメラ設定
	camera->Set(camera->GetPos(), player->Parameters->Position, DirectX::XMFLOAT3(0, 1, 0));
	// カメラ操作
	camera->Operate();

	GpuParticle->Update(camera.get());

	// 敵関連
	{
		// お試し右クリックでランダム位置に敵を生成
		// TODO デバッグ用
		if (GetAsyncKeyState(VK_RBUTTON) < 0)
		{
			Object3d obj3d_desc;
			obj3d_desc.CopyParam(player->Parameters.get());
			obj3d_desc.Position = DirectX::SimpleMath::Vector3((rand() % 25) - 12.0f, 0.0f, (rand() % 25) - 12.0f);
			obj3d_desc.Orientation *= DirectX::SimpleMath::Quaternion::CreateFromAxisAngle({ 0.0f,1.0f,0.0f }, DirectX::XMConvertToRadians(static_cast<float>(rand() % 180)));
			EnemyManager::getInstance().newSet(&obj3d_desc);
			//EnemyManager::getInstance().newSet(player->Parameters.get());
		}
		for (auto it = EnemyManager::getInstance().getEnemys()->begin(); it != EnemyManager::getInstance().getEnemys()->end(); ++it)
		{
			// すべての敵にターゲット設定
			it->get()->setTarget(*player->Parameters);
		}

		EnemyManager::getInstance().Update();	// 敵更新
	}

	// コンピュートシェーダーを実行する
	{
		Microsoft::WRL::ComPtr<ID3D11DeviceContext> immediate_context = FRAMEWORK->GetDeviceContext();
		Microsoft::WRL::ComPtr<ID3D11Device> device = FRAMEWORK->GetDevice();
		HRESULT hr = { S_OK };

		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		static float theta = 0.0f;
		theta = (theta <= 1.0f) ? theta + 0.01f : 0.0f;	// チカチカすりゅ〜！(色が)

		//D3D11_MAPPED_SUBRESOURCE subRes;	// 別の更新方法 のはず。未完成
		//immediate_context->Map(pBufInput.Get(), 0, D3D11_MAP_WRITE_DISCARD, 0, &subRes);
		//BUFIN_TYPE* pBufType = (BUFIN_TYPE*)subRes.pData;
		//pBufType->f += 5;
		////memcpy(subRes.pData, vBufInArray, sizeof(BUFIN_TYPE) * NUM_ELEMENTS);
		//immediate_context->Unmap(pBufInput.Get(), 0);

		// コンスタントバッファ更新
		cs_constants csData{};
		csData.Theta = theta;
		immediate_context->UpdateSubresource(constant_buffer[1].Get(), 0, 0, &csData, 0, 0);
		immediate_context->CSSetConstantBuffers(2, 1, constant_buffer[1].GetAddressOf());
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		UseComputeShader::RunComputeShader(ComputeShader->GetCS(), pBufInputSRV.Get(), 0, pBufResultUAV.Get(), 0, 3, 1, 1);

		// アンオーダードアクセスビューのバッファの内容を CPU から読み込み可能なバッファへコピーする
		ID3D11Buffer* debugbuf = nullptr;
		UseComputeShader::CreateAndCopyToBuffer(pBufResult.Get(), &debugbuf);

		D3D11_MAPPED_SUBRESOURCE MappedResource = { 0 };
		hr = immediate_context->Map(debugbuf, 0, D3D11_MAP_READ, 0, &MappedResource);	// 読み取り専用でマップ
		{
			BUFOUT_TYPE* p;	// 受け取る型の変数を用意する
			// "p,配列要素数"とウォッチ式に入力すると値が見れる これ便利
			p = (BUFOUT_TYPE*)MappedResource.pData;	// 型変換して代入
			player->Parameters->Color = DirectX::SimpleMath::Vector4{ p[1].i, p[0].i, p[2].i, 1.0f };
		}
		immediate_context->Unmap(debugbuf, 0);	// マップ解除
		debugbuf->Release();	// CS受け取りポインタを解放
	}

	imguiUpdate();
}

void SceneGame::Render() {
	HRESULT hr{ S_OK };

	ID3D11DeviceContext* immediate_context = FRAMEWORK->GetDeviceContext();	// DevCon取得

	FRAMEWORK->Clear(ClearColor);	// 一旦クリア

	// ビューポートの設定
	FRAMEWORK->CreateViewPort();

	// サンプラーステートをバインド
	sampleClamp->Set(0);

	immediate_context->OMSetBlendState(FRAMEWORK->GetBlendState(FRAMEWORK->BS_ALPHA), nullptr, 0xFFFFFFFF);	// ブレンドインターフェースのポインタ、ブレンドファクターの配列値、サンプルカバレッジ(今回はデフォルト指定)

	// 2Dオブジェクトの描画設定
	{
		immediate_context->OMSetDepthStencilState(FRAMEWORK->GetDepthStencileState(FRAMEWORK->DS_TRUE), 1);		// 3Dオブジェクトの後ろに出すため一旦
		sprites->Render();
		skybox->Render(camera.get());
		test->Render();
		immediate_context->OMSetDepthStencilState(FRAMEWORK->GetDepthStencileState(FRAMEWORK->DS_TRUE_WRITE), 1);	// 2Dオブジェクトとの前後関係をしっかりするため再設定
	}
	// 3Dオブジェクトの描画設定
	{
		camera->Activate();

		// コンスタントバッファ更新
		scene_constants data{};
		XMStoreFloat4x4(&data.view_projection, camera->GetView() * camera->GetProjection());	// Matrixから4x4へ変換
		data.light_direction = DirectX::SimpleMath::Vector4{ light_dir[0],light_dir[1],light_dir[2],0 };	// シェーダに渡すライトの向き
		data.camera_position = DirectX::SimpleMath::Vector4{ camera->GetPos().x,camera->GetPos().y,camera->GetPos().z,0 };				// シェーダに渡すカメラの位置
		data.View = camera->GetView();
		data.Projection = camera->GetProjection();
		data.ParticleSize = DirectX::SimpleMath::Vector2{ 1.0f,1.0f };
		immediate_context->UpdateSubresource(constant_buffer[0].Get(), 0, 0, &data, 0, 0);
		immediate_context->VSSetConstantBuffers(1, 1, constant_buffer[0].GetAddressOf());	// cBufferはドローコールのたびに消去されるので都度設定する必要がある
		immediate_context->PSSetConstantBuffers(1, 1, constant_buffer[0].GetAddressOf());

		{
			grid->Render(true);
			//StageManager::getInstance().Render();
			//player->Render();
			//EnemyManager::getInstance().Render();
			GpuParticle->SetSceneConstantBuffer(constant_buffer[0].Get());
			GpuParticle->Draw();
		}
	}

#ifdef USE_IMGUI
	//	ImGui::Render();
	//	ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());
#else
	FRAMEWORK->Flip();
#endif
}

void SceneGame::imguiUpdate() {
#ifdef USE_IMGUI
	ImGui_ImplDX11_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

	ImGui::PushStyleColor(ImGuiCol_TitleBgActive, ImVec4(0.0f, 0.6f, 0.1f, 1.0f));	// これ一つ呼ぶとImGui::PopStyleColorを書かないといけないらしい
	ImGui::PushStyleColor(ImGuiCol_TitleBg, ImVec4(0.0f, 0.2f, 0.0f, 1.0f));

	//imguiSceneChanger();
	// 2D用 内部関数で完結させてる
	//sprites->ImguiWindow();
	// 3D用パラメータ
	player->ImguiPlayer();
	GpuParticle->ImguiParticles();
	// ライト調整等グローバル設定
	ImGui::Begin("SceneImGui");
	{
		//ImGui::SliderFloat3("Light_Direction", light_dir, -10.0f, 10.0f);
		if (ImGui::CollapsingHeader("Object Counts"))
		{
			ImGui::Text("PlayerShots: %d", player->getShotManager()->getSize());
			ImGui::Text("EnemyShots: %d", EnemyManager::getInstance().getShotManager()->getSize());
			ImGui::Text("Enemys: %d", EnemyManager::getInstance().getSize());
			ImGui::Text("StageParts: %d", StageManager::getInstance().getSize());
			ImGui::Separator();	// 分割線
			ImGui::Text("Total Objects: %d", StageManager::getInstance().getSize() + EnemyManager::getInstance().getEnemys()->size()
				+ player->getShotManager()->getSize() + EnemyManager::getInstance().getShotManager()->getSize());
		}
		if (ImGui::CollapsingHeader("Initializes"),true)
		{
			if (ImGui::Button("Stage Initialize")) { StageManager::getInstance().Initialize(); }
			if (ImGui::Button("Player Initialize")) { player->Initialize(); }
			if (ImGui::Button("Scene Initialize")) { Initialize(); }
			//if (ImGui::Button("Particle Initialize")) { GpuParticle->Init(); }	// TODO メモリリーク 想定していない使い方なのであまり気にしなくても…？
			if (ImGui::Button("Particle Set")) { GpuParticle->SetParticle(); }
		}
		ImGui::PopStyleColor(2);	// ImGui::PushStyleColor一つにつき引数一つ増えるっぽい
		ImGui::End();
	}
#endif
}